#!/bin/sh -eux

PACKAGES="ack-grep \
    audacity \
    android-tools-adb \
    backintime-gnome \
    chromium-browser \
    clamav \
    devscripts \
    diceware \
    dos2unix \
    dput \
    expect \
    exuberant-ctags \
    fancontrol \
    ffmpeg \
    fdupes \
    firejail \
    fortune-mod \
    fwts \
    gcc-avr \
    gimp \
    git \
    gmessage \
    gnupg2 \
    gnome-encfs-manager \
    gnome-tweaks \
    golang-go \
    gparted \
    gpick \
    gtk-recordmydesktop \
    gvfs-backends \
    hardinfo \
    html2text \
    htop \
    httping \
    indicator-sysmonitor \
    inkscape \
    irssi \
    jq \
    jhead \
    lastpass-cli \
    libttspico-utils \
    libimage-exiftool-perl \
    libreadline-dev \
    libssl-dev \
    libvdpau-va-gl1 \
    linphone \
    links \
    lm-sensors \
    magic-wormhole \
    markdown \
    mesa-utils \
    mosh \
    mosquitto-clients \
    net-tools \
    network-manager-openvpn \
    network-manager-openvpn-gnome \
    nfs-common \
    nmap \
    pavucontrol \
    pidgin \
    pgpdump \
    playonlinux \
    powertop \
    postgresql-client-common \
    postgresql-client-10 \
    python3-pip \
    python3-tk \
    python3-virtualenv \
    python-requests \
    python-dev \
    rename \
    reprepro \
    rng-tools \
    run-one \
    safe-rm \
    sshfs \
    smbclient \
    screen \
    signal-desktop \
    sqlite3 \
    stow \
    syncthing \
    synaptic \
    thunderbird \
    tftp \
    tk-dev \
    tmux \
    tmuxinator \
    tor \
    transmission-gtk \
    tree \
    ubuntu-dev-tools \
    usb-creator-gtk \
    uuid \
    unattended-upgrades \
    virtualenv \
    virtualenvwrapper \
    vagrant \
    vim-nox \
    virtualbox \
    vlc \
    whois \
    wireshark-qt \
    xclip"

check_sudo() {
    if [ "$(whoami)" != "root" ]; then
	echo "Must be root."
	exit 1
    fi

}

prompt_yes_no() {
  while true; do
    read -p "$1 [y/n] " yesno

    if [ "$yesno" = "y" ]; then
      return 0

    elif [ "$yesno" = "n" ]; then
      return 1
    fi
  done
}


install_basics() {
    apt install -y \
	vim-nox \
	curl
}

configure_ppas() {
    add-apt-repository -y ppa:gencfsm
    add-apt-repository -y ppa:fossfreedom/indicator-sysmonitor

    # https://www.virtualbox.org/wiki/Linux_Downloads
    apt-key adv --keyserver keyserver.paulfurley.com --recv-key 0xB9F8D658297AF3EFC18D5CDFA2F683C52980AECF
    echo 'deb http://download.virtualbox.org/virtualbox/debian xenial contrib' > /etc/apt/sources.list.d/virtualbox.list


    # https://signal.org/download/
    apt-key adv --keyserver keyserver.paulfurley.com --recv-key 0xDBA36B5181D0C816F630E889D980A17457F6FB06

    echo "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main" | sudo tee /etc/apt/sources.list.d/signal-xenial.list


    # https://apt.syncthing.net/

    curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
    echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
}

maybe_configure_nvidia_repo() {
  if prompt_yes_no "Install nvidia proprietary drivers?"; then
    INSTALL_NVIDIA="1"

    add-apt-repository ppa:graphics-drivers/ppa

  else
    INSTALL_NVIDIA="0"
  fi
}

apt_update() {
    apt update
}

upgrade_and_autoremove() {
    apt upgrade -y
    apt autoremove -y
}

install_packages() {

apt install -y $PACKAGES

    # vlc-nox \
    # pidgin \
    # murcurial \
    # unetbootin \
}

install_vagrant() {
    if  vagrant --version; then
      return
    fi

    cd /tmp/
    wget -c 'https://releases.hashicorp.com/vagrant/2.0.1/vagrant_2.0.1_x86_64.deb'

    if [ "$(sha256sum vagrant_2.0.1_x86_64.deb)" != "2f9498a83b3d650fcfcfe0ec7971070fcd3803fad6470cf7da871caf2564d84f  vagrant_2.0.1_x86_64.deb" ]; then
	echo "Vagrant checksum failed."
	exit 2
    fi

    dpkg -i vagrant_2.0.1_x86_64.deb
    cd -
}

install_standard_notes() {
  cd /tmp
  wget https://github.com/standardnotes/desktop/releases/download/v2.3.3/standard-notes-2.3.3-x86_64.AppImage
  chmod +x standard-notes-2.3.3-x86_64.AppImage
  ./standard-notes-2.3.3-x86_64.AppImage
  cd -
}

install_go_dep() {
  go get -u github.com/golang/dep/cmd/dep
}

maybe_install_nvidia() {
  if [ "$INSTALL_NVIDIA" = "1" ]; then
	# TODO: which package do you actually need to install?
	apt install -y nvidia-384
    fi
}

maybe_install_intel_microcode() {
    if prompt_yes_no "install intel microcode?" ; then
	apt install -y intel-microcode
    fi
}

# zerotier-one

check_sudo
maybe_configure_nvidia_repo
install_basics
configure_ppas
apt_update
upgrade_and_autoremove
install_packages
install_vagrant
install_standard_notes
install_go_dep
maybe_install_nvidia
maybe_install_intel_microcode

echo "Done installing packages. Now restore backintime snapshot"
