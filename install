#!/bin/sh -eux

BASIC_PACKAGES="vim-nox \
 	curl"

PPA_PACKAGES="signal-desktop \
    gnome-encfs-manager \
    heroku \
    indicator-sysmonitor \
    syncthing \
    inkscape \
    1password \
    virtualbox \
    postgresql-client-13 \
    "

STANDARD_PACKAGES="ack-grep \
    apt-transport-https \
    audacity \
    backintime-qt \
    colordiff \
    devscripts \
    diceware \
    dos2unix \
    dput \
    expect \
    exuberant-ctags \
    fancontrol \
    ffmpeg \
    fdupes \
    firejail \
    fortune-mod \
    fwts \
    gcc-avr \
    gimp \
    git \
    gmessage \
    gnupg2 \
    gnome-tweaks \
    gparted \
    gpick \
    gvfs-backends \
    hardinfo \
    html2text \
    htop \
    httping \
    inotify-tools \
    irssi \
    jq \
    jhead \
    libttspico-utils \
    libimage-exiftool-perl \
    libreadline-dev \
    libssl-dev \
    libvdpau-va-gl1 \
    linphone \
    links \
    lm-sensors \
    markdown \
    mesa-utils \
    mosh \
    net-tools \
    nfs-common \
    nfs-kernel-server \
    nmap \
    openresolv \
    pavucontrol \
    powertop \
    postgresql-client-common \
    rename \
    reprepro \
    rng-tools \
    run-one \
    safe-rm \
    sshfs \
    smbclient \
    screen \
    sqlite3 \
    stow \
    synaptic \
    thunderbird \
    tftp \
    tk-dev \
    tmux \
    tmuxinator \
    transmission-gtk \
    tree \
    ubuntu-dev-tools \
    usb-creator-gtk \
    uuid \
    unattended-upgrades \
    unrar \
    vim-nox \
    vlc \
    whois \
    wireshark-qt \
    wireguard \
    xclip"

    # mosquitto-clients \
    # pidgin \
    # pgpdump \
    # playonlinux \
    # chromium-browser \
    # clamav \
    # exfat-fuse \
    # exfat-utils \
    # gtk-recordmydesktop \
    # postgresql-client-10 \
    # python-requests \
    # python3-pip \
    # python3-tk \
    # python3-virtualenv \
    # python-dev \
    # virtualenv \
    # virtualenvwrapper \
    # magic-wormhole \
    # lastpass-cli \
    # tor \
    # network-manager-openvpn \
    # network-manager-openvpn-gnome \

check_sudo() {
    if [ "$(whoami)" != "root" ]; then
	echo "Must be root."
	exit 1
    fi

}

prompt_yes_no() {
  while true; do
    read -p "$1 [y/n] " yesno

    if [ "$yesno" = "y" ]; then
      return 0

    elif [ "$yesno" = "n" ]; then
      return 1
    fi
  done
}


install_basics() {
    apt install -y $BASIC_PACKAGES
}

configure_ppas() {
    # e.g. focal  = ubuntu 20.04 LTS
    #      jammy  = ubuntu 22.04 LTS
    CODENAME=$(lsb_release --codename --short)

    ########## postgresql ##########
    if [ ! -f "/etc/apt/sources.list.d/postgreql-${CODENAME}.list" ]; then
        echo "deb https://apt.postgresql.org/pub/repos/apt ${CODENAME}-pgdg main" > /etc/apt/sources.list.d/postgreql-${CODENAME}.list
        wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
    fi


    ########## gencfsm ##########
    if [ ! -f "/etc/apt/sources.list.d/gencfsm-ubuntu-ppa-${CODENAME}.list" ]; then
        add-apt-repository -y ppa:gencfsm
    fi


    ########## indicator-sysmonitor ##########
    if [ ! -f "/etc/apt/sources.list.d/fossfreedom-ubuntu-indicator-sysmonitor-${CODENAME}.list" ]; then
	add-apt-repository -y ppa:fossfreedom/indicator-sysmonitor
    fi

    ########## virtualbox ##########
    if [ ! -f "/etc/apt/sources.list.d/virtualbox-${CODENAME}.list" ]; then
        # https://www.virtualbox.org/wiki/Linux_Downloads
        apt-key adv --keyserver keyserver.ubuntu.com --recv-key 0xB9F8D658297AF3EFC18D5CDFA2F683C52980AECF
        echo "deb http://download.virtualbox.org/virtualbox/debian ${CODENAME} contrib" > /etc/apt/sources.list.d/virtualbox-${CODENAME}.list
    fi


    ########## signal ##########
    if [ ! -f "/etc/apt/sources.list.d/signal-xenial.list" ]; then
         # https://signal.org/download/
         # 2022-02-02 they currently only provide a "xenial" repositry
         apt-key adv --keyserver keyserver.ubuntu.com --recv-key 0xDBA36B5181D0C816F630E889D980A17457F6FB06
         echo "deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main" | sudo tee /etc/apt/sources.list.d/signal-xenial.list
    fi


    ########## syncthing ##########
    if [ ! -f "/etc/apt/sources.list.d/syncthing.list" ]; then
        # https://apt.syncthing.net/
        curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
        echo "deb https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
    fi

    ########## inkscape ##########
    if [ ! -f "/etc/apt/sources.list.d/inkscape_dev-ubuntu-stable-${CODENAME}.list" ]; then
        # Inkscape
        # https://inkscape.org/release/
        add-apt-repository ppa:inkscape.dev/stable
    fi

    ########## heroku ##########
    if [ ! -f "/etc/apt/sources.list.d/heroku.list" ]; then
        # Heroku
        # https://devcenter.heroku.com/articles/heroku-cli#install-with-ubuntu-debian-apt-get

        # install heroku's release key for package verification
        curl https://cli-assets.heroku.com/channels/stable/apt/release.key | apt-key add -

        echo "deb https://cli-assets.heroku.com/channels/stable/apt ./" > /etc/apt/sources.list.d/heroku.list
    fi

    ########## 1password ##########
    if [ ! -f "/etc/apt/sources.list.d/1password.list" ]; then
      # https://support.1password.com/install-linux/#debian-or-ubuntu

      # Add the key for the 1Password apt repository:
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg

      # Add the 1Password apt repository:
      echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list

      # Add the debsig-verify policy:
      mkdir -p /etc/debsig/policies/AC2D62742012EA22/
      curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
      mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
      curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
    fi
}

maybe_configure_nvidia_repo() {
  INSTALL_NVIDIA=0
  return 0

  if prompt_yes_no "Install nvidia proprietary drivers?"; then
    INSTALL_NVIDIA="1"

    add-apt-repository ppa:graphics-drivers/ppa

  else
    INSTALL_NVIDIA="0"
  fi
}

apt_update() {
    apt update
}

upgrade_and_autoremove() {
    apt upgrade -y
    apt autoremove -y
}

install_standard_packages() {

apt install -y $STANDARD_PACKAGES

    # vlc-nox \
    # pidgin \
    # murcurial \
    # unetbootin \
}

install_ppa_packages() {
    apt install -y $PPA_PACKAGES
}

atomic_download() {
    URL=$1
    DEST=$2

    if [ -f "${DEST}" ]; then
      return 0 # already downloaded
    fi

    mkdir -p "$(dirname $DEST)"

    TMP="$(mktemp)"

    wget -qO "${TMP}" "${URL}" && mv "${TMP}" "${DEST}"
}

install_vagrant() {
    if  vagrant --version; then
      return
    fi

    cd /tmp/
    wget -c 'https://releases.hashicorp.com/vagrant/2.0.1/vagrant_2.0.1_x86_64.deb'

    if [ "$(sha256sum vagrant_2.0.1_x86_64.deb)" != "2f9498a83b3d650fcfcfe0ec7971070fcd3803fad6470cf7da871caf2564d84f  vagrant_2.0.1_x86_64.deb" ]; then
	echo "Vagrant checksum failed."
	exit 2
    fi

    dpkg -i vagrant_2.0.1_x86_64.deb
    cd -
}

install_standard_notes() {
  atomic_download https://github.com/standardnotes/desktop/releases/download/v2.3.3/standard-notes-2.3.3-x86_64.AppImage /opt/standard-notes/standard-notes-2.3.3-x86_64.AppImage

  chmod +x /opt/standard-notes/standard-notes-2.3.3-x86_64.AppImage

  ln -sf /opt/standard-notes/standard-notes-2.3.3-x86_64.AppImage /home/paul/bin/standardnotes
}


install_golang_1_16_4() {
    if [ -f "/opt/go/bin/go" ]; then
      echo "/opt/go/bin/go already installed, skipping. To force, run 'rm -rf /opt/go'"
      return 0
    fi

    GO_TARBALL=/tmp/download/go1.16.4.linux-amd64.tar.gz
    GO_URL=https://dl.google.com/go/go1.16.4.linux-amd64.tar.gz

    atomic_download "${GO_URL}" "${GO_TARBALL}"

    rm -rf /opt/go
    mkdir /opt/go
    # tarball paths start go/...
    tar --directory /opt --extract -f "${GO_TARBALL}"

    ln -sf /vagrant/vagrant/etc/profile.d/golang.sh /etc/profile.d/golang.sh
}

install_node_14() {
  curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
  sudo apt-get install -y nodejs
}

install_hugo_0_82_0() {
  if which hugo ; then
    return
  fi

  wget -O /tmp/hugo_extended.deb https://github.com/gohugoio/hugo/releases/download/v0.82.0/hugo_extended_0.82.0_Linux-64bit.deb
  dpkg -i /tmp/hugo_extended.deb
}

install_espanso_2_1_8_x11() {
  if which espanso ; then
    return
  fi

  apt install -y libxtst6 libxdo3 xclip libnotify-bin

  atomic_download https://github.com/federico-terzi/espanso/releases/download/v2.1.8/espanso-debian-x11-amd64.deb /tmp/espanso-debian-amd64.deb
  dpkg -i /tmp/espanso-debian-amd64.deb
}

install_zoom_5_16_2() {
  if which zoom ; then
    return
  fi

  VERSION="5.16.2.8828"

  # the following dependencies were valid for 5.16.2.8828
  apt install -y libgl1-mesa-glx libegl1-mesa libxcb-xtest0 libxcb-cursor0

  atomic_download https://us06web.zoom.us/client/${VERSION}/zoom_amd64.deb /tmp/zoom_${VERSION}.deb
  dpkg -i /tmp/zoom_${VERSION}.deb
}

install_heroku_cli() {
  if which heroku ; then
    return
  fi



}

maybe_install_nvidia() {
  if [ "$INSTALL_NVIDIA" = "1" ]; then
	# TODO: which package do you actually need to install?
	apt install -y nvidia-384
    fi
}

maybe_install_intel_microcode() {
    if prompt_yes_no "install intel microcode?" ; then
	apt install -y intel-microcode
    fi
}

# zerotier-one

check_sudo
maybe_configure_nvidia_repo
install_basics
upgrade_and_autoremove
install_standard_packages
configure_ppas
apt_update
install_ppa_packages
install_vagrant
install_standard_notes
install_golang_1_16_4
# install_node_14
install_hugo_0_82_0
install_espanso_2_1_8_x11
install_zoom_5_16_2
install_heroku_cli
maybe_install_nvidia
maybe_install_intel_microcode

echo "Done installing packages. Now restore backintime snapshot"
